name: Publish
on:
  schedule:
    - cron: '*/5 * * * *'
    # - cron: '0 6 * * *' # Nightly, run at 06:00 UTC
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v2.0
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release_info.outputs.version }}
      tag: ${{ steps.release_info.outputs.tag }}
      date: ${{ steps.release_info.outputs.date }}
    steps:
      - name: Activity check
        shell: bash
        run: |
          # check if we need to build
          D=30   # 86400 - 24 hours in seconds

          lastcommit="$(curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/commits | jq -r '[.[] | select (.commit.message != "Updating docs") ][0].commit.author.date')"
          timestamp=$(date -u -d "$lastcommit" +%s)
          days=$(( ( $(date -u +%s) - $timestamp ) / $D ))
          worktodo=1
          echo "lastcommit: $lastcommit"
          echo "timestamp: $timestamp"
          echo "days: $days"
          echo "github event: $GITHUB_EVENT_NAME"
          if [[ $days -gt 0 && $GITHUB_EVENT_NAME == 'schedule' ]]; then
            echo "nothing to do, last 'human' commit was $days days ago"
            worktodo=0
          fi
          echo "worktodo: $worktodo"
          echo "GHA_WORK_TO_DO=$worktodo" >> $GITHUB_ENV

      - name: release info
        id: release_info
        run: |
          echo '::set-output tag=2020-10-06'
          echo '::set-output release_type=nightly'
          echo '::set-output browser_download_url=http://example.com'

      - name: Create a Slack message
        id: slack_message
        env:
          msg_tag: ${{ steps.release_info.outputs.tag }} - tag
          msg_url: ${{ steps.release_info.outputs.browser_download_url }} - url
        run: |
          msg='Release '
          if [[ ${{ steps.release_info.outputs.release_type == 'nightly' }} ]]; then
            msg='Prerelease '
          fi
          msg="${msg} ${msg_tag} is built.
          Available at ${msg_url}
          "
          echo 'TTT_BUILD<<EOF' >> $GITHUB_ENV
          echo "$msg" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: notify Slack
        uses: rtCamp/action-slack-notify@v2.1.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_TTT_UPDATES }}
          SLACK_USERNAME: 'githubbot'
          SLACK_ICON_EMOJI: ':genie:'
          MSG_MINIMAL: true
          SLACK_MESSAGE: ${{ env.TTT_BUILD }}
